import axios from "axios";
import { refreshToken, showError } from "./function.js";
const axiosLogin = axios.create({
  baseURL: `${import.meta.env.VITE_API_BACKEND}`,
  headers: {
    "Content-Type": "application/json"
  },
  withCredentials: true // üî• Cho ph√©p g·ª≠i v√† nh·∫≠n cookie t·ª´ backend
});

// Interceptor ƒë·ªÉ th√™m accessToken v√†o header
axiosLogin.interceptors.request.use(
  function (config) {
    // Do something before request is sent
    return config;
  },
  function (error) {
    // Do something with request error
    return Promise.reject(error);
  }
);

// Add a response interceptor
axiosLogin.interceptors.response.use(
  function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  },
  function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  }
);
// khi ƒë√£ ƒëƒÉng nh·∫≠p
const axiosBackend = axios.create({
  baseURL: `${import.meta.env.VITE_API_BACKEND}`,
  headers: {
    "Content-Type": "application/json"
  },
  withCredentials: true // üî• Cho ph√©p g·ª≠i v√† nh·∫≠n cookie t·ª´ backend
});

// Interceptor ƒë·ªÉ th√™m accessToken v√†o header
axiosBackend.interceptors.request.use(
  function (config) {
    // Do something before request is sent
    if (
      config.url !== "auth/login" &&
      config.url !== "auth/register" &&
      config.url !== "auth/refresh"
    ) {
      const data = localStorage.getItem("accessToken");
      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ accessToken, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login ho·∫∑c x·ª≠ l√Ω l·ªói
      if (!data) {
        showError("Phi√™n H·∫øt H·∫°n Vui L√≤ng ƒëƒÉng Nh·∫≠p L·∫°i");
        return Promise.reject("No access token found, please log in.");
      }
      // N·∫øu c√≥ accessToken, th√™m v√†o header Authorization
      config.headers["Authorization"] = `Bearer ${data}`;
    }
    return config;
  },
  function (error) {
    // Do something with request error
    return Promise.reject(error);
  }
);

// Add a response interceptor
axiosBackend.interceptors.response.use(
  function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  },
  async function (error) {
    const originalRequest = error.config;
    // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p token h·∫øt h·∫°n
    const err = error?.response.data.errorCode;

    if (
      err == "TOKEN_EXPIRED" &&
      error.response?.status === 401 &&
      !originalRequest._retry
    ) {
      originalRequest._retry = true;
      const refresh = await refreshToken();
      if (!refresh) {
        showError("Phi√™n H·∫øt H·∫°n Vui L√≤ng ƒëƒÉng Nh·∫≠p L·∫°i");
        localStorage.removeItem("accessToken");
        // window.location.reload();
      }
      originalRequest.headers["Authorization"] = `Bearer ${refresh}`;
      return axiosBackend(originalRequest);
    }
    return Promise.reject(error);
  }
);
export { axiosBackend, axiosLogin };
