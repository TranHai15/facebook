import ClientModel from "../models/clientModel.js";
import * as func from "../config/func.js";
import { getSocketServer } from "../socket.js";
const clientController = {
  // l·∫•y danh s√°ch b·∫°n b√®
  getAllFriend: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const user = await ClientModel.getAllFriend(id);
      return res.status(200).json(user);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch b·∫°n b√®:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y danh s√°ch b·∫°n b√®."
      });
    }
  },
  // l·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán
  getMessage: async (req, res) => {
    try {
      const { id } = req.user;
      const { type, sender_id, col, idChat } = req.body;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      if (col) {
        if (col == "message") {
          const lastMessage = await ClientModel.getAllMessage(idChat);
          return res
            .status(200)
            .json({ idChat: idChat, chatMessage: lastMessage });
        }
      } else {
        if (!type || !sender_id) {
          return res.status(401).json({
            errorCode: "NO_TOKEN",
            message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
          });
        }
      }
      const message = await ClientModel.getIDMessage(id, sender_id, type);
      // N·∫øu ch∆∞a c√≥ chat th√¨ t·∫°o id chat m·ªõi
      if (message === null) {
        const createMessage = await ClientModel.createMessage(
          id,
          sender_id,
          func.dateTime()
        );
        return res.status(200).json({ idChat: createMessage, chatMessage: [] });
      }
      const lastMessage = await ClientModel.getAllMessage(message);
      return res
        .status(200)
        .json({ idChat: message, chatMessage: lastMessage });
    } catch (error) {
      console.error("L·ªói khi l·∫•y lich s·ª≠ tr√≤ chuy·ªán:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y lich s·ª≠ tr√≤ chuy·ªán."
      });
    }
  },
  // L·∫•y to√†n b·ªô l·ªùi m·ªùi k·∫øt b·∫°n
  getAllFriendReq: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const dataFriend = await ClientModel.getAllFriendReq(id);
      return res.status(200).json(dataFriend);
    } catch (error) {
      console.error("L·ªói khi l·∫•y Danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n."
      });
    }
  },
  // Ch·∫•p nh·∫≠n k·∫øt b·∫°n
  addFriend: async (req, res) => {
    try {
      const { id } = req.user;
      const { idFriend, idTable } = req.body;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      if (!idFriend || !idTable) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const dataFriend = await ClientModel.addFriend(
        id,
        idFriend,
        func.dateTime()
      );
      const deleteFriend = await ClientModel.acceptedFriend(idTable);
      await ClientModel.addNotification(
        id,
        "friend_accept",
        idFriend,
        null,
        1,
        "ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n",
        func.dateTime()
      );
      const io = getSocketServer();
      const idMen = `${idFriend.toString()}abc`;
      io.emit(idMen, {
        type: "chap"
      });
      return res.status(200).json({ dataFriend, deleteFriend });
    } catch (error) {
      console.error("L·ªói khi l·∫•y Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n."
      });
    }
  },
  // Kh√¥ng ch·∫•p nh·∫≠n k·∫øt b·∫°n
  deleteFriend: async (req, res) => {
    try {
      const { id } = req.user;
      const { idTable, id_friend } = req.body;
      if (!idTable) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const deleteFriend = await ClientModel.deleteFriend(idTable);
      await ClientModel.deleteFriendRequestNotification(id, id_friend);
      return res.status(200).json({ deleteFriend });
    } catch (error) {
      console.error("L·ªói khi l·∫•y Coa l·ªùi m·ªùi k·∫øt b·∫°n:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Xoa l·ªùi m·ªùi k·∫øt b·∫°n."
      });
    }
  },
  // L·∫•y to√†n b·ªô b√†i post
  getAllPost: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const dataPost = await ClientModel.getAllPost(id);
      return res.status(200).json(dataPost);
    } catch (error) {
      console.error("L·ªói khi l·∫•y B√†i Post:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y B√†i Post."
      });
    }
  },
  // L·∫•y to√†n b·ªô b√†i post c·ªßa profile
  getAllPostProfile: async (req, res) => {
    try {
      const { idProfile } = req.body;
      console.log("üöÄ ~ getAllPostProfile: ~ id:", idProfile);
      if (!idProfile) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const dataPost = await ClientModel.getAllPost(idProfile);
      return res.status(200).json(dataPost);
    } catch (error) {
      console.error("L·ªói khi l·∫•y B√†i Post:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y B√†i Post."
      });
    }
  },

  // Th√™m m·ªõi B√†i Post
  addPost: async (req, res) => {
    try {
      const { id } = req.user;
      const file = req.files;
      const pathImg = file[0]?.path ?? "null";
      const { content } = req.body;
      // const {content}
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      if (!content) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "Khong co tieu ƒë·ªÅ"
        });
      }
      const dataPost = await ClientModel.addPost(
        id,
        content,
        pathImg,
        func.dateTime()
      );
      // console.log("üöÄ ~ addPost: ~ dataPost:", dataPost[0]?.insertId);
      const io = getSocketServer();
      const users = await ClientModel.getAllFriend(id);

      users.forEach(async (user) => {
        await ClientModel.addNotification(
          id,
          "post",
          user.id,
          dataPost[0]?.insertId,
          1,
          content,
          func.dateTime()
        );
        const idMen = `${user.id.toString()}abc`;
        io.emit(idMen, {
          type: "post"
        });
      });
      return res.status(200).json(dataPost);
    } catch (error) {
      console.error("L·ªói khi Th√™m Post", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu h√™m Post"
      });
    }
  },
  // L·∫•y to√†n b·ªô th√¥ng b√°o
  getAllNotification: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const dataNotification = await ClientModel.getAllNotification(id);
      return res.status(200).json(dataNotification);
    } catch (error) {
      console.error("L·ªói khi l·∫•y Th√¥ng b√°o:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Th√¥ng b√°o"
      });
    }
  },
  // l·∫•y danh s√°ch ph√≤ng chat
  getAllMessageChat: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const user = await ClientModel.getAllMessageChat(id);
      return res.status(200).json(user);
    } catch (error) {
      console.error("L·ªói khi l·∫•y Danh s√°ch ph√≤ng chat:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Danh s√°ch ph√≤ng chat."
      });
    }
  },
  // l·∫•y chi ti·∫øt b√†i vi·∫øt
  getDetailPost: async (req, res) => {
    try {
      const { id } = req.user;
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const { id: idPost } = req.params;
      if (!idPost) {
        return res.status(401).json({
          errorCode: "NO_POST",
          message: "Kh√¥ng c√≥ b√†i vi·∫øt n√†o"
        });
      }
      const post = await ClientModel.getPostById(idPost);
      const comments = await ClientModel.getCommentByPostId(idPost);
      const likes = await ClientModel.getLikeByPostId(idPost);
      const data = {
        post: post,
        comments: comments,
        likes: likes
      };
      return res.status(200).json(data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y Danh s√°ch ph√≤ng chat:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y Danh s√°ch ph√≤ng chat."
      });
    }
  },
  //  Th√™m comment
  addComment: async (req, res) => {
    try {
      const { id } = req.user;
      const { content, post_id, id_send, id_user } = req.body;
      // id c·ªßa ng∆∞·ªùi comment
      // console.log("üöÄ ~ addComment: ~ id_send:", id_send);
      // id c·ªßa ng∆∞·ªùi nh·∫≠n ƒëc comment th√¥ng b√°o
      // console.log("üöÄ ~ addComment: ~ id_user:", id_user);

      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      if (!content || !post_id || !id_send || !id_user) {
        return res.status(401).json({
          errorCode: "NO_COMMENT",
          message: "Kh√¥ng c√≥ n·ªôi dung comment"
        });
      }
      const dataComment = await ClientModel.addComment(
        post_id,
        id_send,
        content,
        func.dateTime()
      );
      console.log("sss", id_user != id_send);
      if (id_user != id_send) {
        // id khac nhau
        console.log("message id khac nhau");
        const addNotification = await ClientModel.addNotification(
          id_send,
          "comment",
          id_user,
          post_id,
          1,
          content,
          func.dateTime()
        );
      }
      const io = getSocketServer();
      io.emit(id_send.toString(), {
        type: "comment",
        post_id: post_id
      });
      const idMen = `${id_user.toString()}abc`;
      io.emit(idMen, {
        type: "comment",
        post_id: post_id
      });

      return res.status(200).json(post_id);
    } catch (error) {
      console.error("L·ªói khi th√™m comment:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu th√™m comment."
      });
    }
  },
  // Th√™m like
  addLike: async (req, res) => {
    try {
      const { id } = req.user;
      const { id_post, id_to, type } = req.body;
      console.log("üöÄ ~ addLike: ~ type:", type);
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      if (!id_post || !id_to) {
        return res.status(401).json({
          errorCode: "NO_COMMENT",
          message: "Kh√¥ng c√≥ n·ªôi dung comment"
        });
      }
      const like = await ClientModel.addLike(
        id_post,
        id,
        func.dateTime(),
        type
      );
      if (type == false) {
        if (id !== id_to) {
          const addNotification = await ClientModel.addNotification(
            id,
            "like",
            id_to,
            id_post,
            1,
            "Th√≠ch b√†i vi·∫øt c·ªßa b·∫°n",
            func.dateTime()
          );
        }
      }
      const io = getSocketServer();
      const idMen = `${id_to.toString()}abc`;
      io.emit(idMen, {
        type: "like",
        type: type,
        id_post: id_post
      });
      io.emit(id.toString(), {
        type: "like",
        type: type,
        id_post: id_post
      });
      return res.status(200).json();
    } catch (error) {
      console.error("L·ªói khi th√™m like:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu th√™m like."
      });
    }
  },
  // tim ki·∫øm theo t√™n
  searchUsers: async (req, res) => {
    try {
      const { name } = req.query;
      if (!name || name.trim() === "") {
        return res.status(400).json({ message: "Thi·∫øu tham s·ªë name" });
      }
      const users = await ClientModel.findUsersByName(name.trim());
      return res.json(users);
    } catch (error) {
      console.error("searchUsers error:", error);
      return res.status(500).json({ message: "Server error" });
    }
  },
  // l·∫•y ra th√¥ng tin c√° nh√¢n
  getProfile: async (req, res) => {
    try {
      const { id } = req.params;
      console.log("üöÄ ~ getProfile: ~ id:", id);
      if (!id) {
        return res.status(401).json({
          errorCode: "NO_REFRESH_TOKEN",
          message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p"
        });
      }
      const user = await ClientModel.getUserInfo(id);
      const friends = await ClientModel.getAllFriend(id);
      const friendStatus = await ClientModel.getFriendStatus(req.user.id, id);
      const data = {
        user: user,
        friends: friends,
        friendStatus: friendStatus
      };
      return res.status(200).json(data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y th√¥ng tin c√° nh√¢n:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu l·∫•y th√¥ng tin c√° nh√¢n."
      });
    }
  },
  // g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n
  sendFriendRequest: async (req, res) => {
    try {
      const { id } = req.user;

      const { idFriend } = req.body;
      const addFriend = await ClientModel.addFriendRequest(
        id,
        idFriend,
        "pending",
        func.dateTime()
      );
      await ClientModel.addNotification(
        id,
        "friend_request",
        idFriend,
        null,
        1,
        "ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n",
        func.dateTime()
      );
      const io = getSocketServer();
      const idMen = `${idFriend.toString()}abc`;
      io.emit(idMen, {
        type: "addFriend"
      });
      res.status(200).json(addFriend);
    } catch (error) {
      console.error("L·ªói khi g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n:", error);
      res.status(500).json({
        code: "SERVER_ERROR",
        message: "ƒê√£ x·∫£y ra l·ªói khi y√™u c·∫ßu g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n."
      });
    }
  },
  // Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
  editProfile: async (req, res) => {
    try {
      const userId = req.user.id;
      const { username } = req.body;
      // Validation
      if (!username || username.trim().length < 3) {
        return res.status(400).json({ message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±" });
      }
      // Determine avatar filename if uploaded
      const file = req.files;
      const pathImg = file[0]?.path ?? null;
      console.log("üöÄ ~ editProfile: ~ pathImg:", pathImg);
      // Update in DB
      await ClientModel.updateUserProfile(userId, username.trim(), pathImg);
      return res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
    } catch (error) {
      console.error("editProfile error:", error);
      return res.status(500).json({ message: "L·ªói server" });
    }
  }
};

export default clientController;
